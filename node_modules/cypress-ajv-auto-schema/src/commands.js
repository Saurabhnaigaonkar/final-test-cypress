import 'cypress-ajv-schema-validator';

const SCHEMA_SUBDIR = 'schemas'; // stored under cypress/fixtures

Cypress.Commands.add('apiSchemaGenerate', (url, schemaName, requestOptions = {}) => {
  if (!url || !schemaName) throw new Error('apiSchemaGenerate(url, schemaName) is required');
  return cy.request({ url, ...requestOptions }).then((res) => {
    return cy.task('cjs_generateSchema', { json: res.body, schemaName }).then((out) => {
      Cypress.log({ name: 'apiSchemaGenerate', message: `Saved: ${out.filePath}` });
      return out;
    });
  });
});

Cypress.Commands.add('apiSchemaValidate', (url, schemaName, requestOptions = {}) => {
  if (!url || !schemaName) throw new Error('apiSchemaValidate(url, schemaName) is required');
  const fixturePath = `${SCHEMA_SUBDIR}/${schemaName}.json`;
  return cy.fixture(fixturePath).then((schema) => {
    return cy.request({ url, ...requestOptions }).then((res) => {
      cy.wrap(res).validateSchema(schema); // provided by cypress-schema-validator
    });
  });
});

/**
 * apiSchemaCheck(url, schemaName, { update = false }):
 * - If schema missing: generates it.
 * - If schema exists: validates against it.
 * - If update=true: regenerates and overwrites (useful when API changed).
 */
Cypress.Commands.add('apiSchemaCheck', (url, schemaName, options = {}) => {
  const { update = false, requestOptions = {} } = options;
  if (!url || !schemaName) throw new Error('apiSchemaCheck(url, schemaName) is required');

  return cy.task('cjs_schemaExists', { schemaName }).then((exists) => {
    if (update || !exists) {
      return cy.apiSchemaGenerate(url, schemaName, requestOptions);
    } else {
      return cy.apiSchemaValidate(url, schemaName, requestOptions);
    }
  });
});
